# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xM4i6aYhoS1JFiqJ2NzXn38lOGNSutQ4
"""

# -*- coding: utf-8 -*-
"""
Running the example, the accuracy on the training and validation test is printed 
each epoch and at the end of the classification error rate is printed.

Note: Your results may vary given the stochastic nature of the algorithm or 
evaluation procedure, or differences in numerical precision. Consider running the example 
a few times and compare the average outcome.

Epochs may take about 45 seconds to run on the GPU (e.g. on AWS). 
You can see that the network achieves an error rate of 0.95%, which is better than 
our simple multi-layer perceptron model above.
"""

# Simple CNN for the MNIST Dataset
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
from numpy import asarray


# load data
(x_train, y_train), (x_test, y_test) = mnist.load_data() 


# plot first few images
for i in range(9):
	# define subplot
    plt.subplot(330 + 1 + i)
	# plot raw pixel data
    plt.imshow(x_train[i], cmap = 'gray')
    plt.axis('off')
# show the figure
    plt.title('True title: %i' % y_train[i], fontdict={'fontsize': 10})
# show the figure
plt.show()


#reshape to be [samples][width][height][channels]
x_train = x_train.reshape((x_train.shape[0], 28, 28, 1)).astype('float32')
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1)).astype('float32')

# one hot encode outputs
y_train = np_utils.to_categorical(y_train) #ceate binary matrix according to the num position
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1] 

# define a simple CNN model
def baseline_model():
	# create model
	model = Sequential()
	model.add(Conv2D(32, (5, 5), input_shape=(28, 28, 1), activation='relu')) #conv on 2dim , 32 pixels each one 5*5, 
	model.add(MaxPooling2D()) 
	model.add(Dropout(0.2)) # ignoring 0.2 of the output 
	model.add(Flatten()) #flat the matrix for the nueral networks 
	model.add(Dense(64, activation='relu')) 
	model.add(Dense(num_classes, activation='softmax'))
	# Compile model
	model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
	return model

# build the model
model = baseline_model()
model.summary()
# Fit the model
history=model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=6, batch_size=200)

#Process ploting
#plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Final evaluation of the model
scores = model.evaluate(x_test, y_test, verbose=0)
print("CNN Error: %.2f%%" % (100-scores[1]*100))

temp = cv2.imread('zero.jpg', 0).reshape(1,28,28,1) #load image by image to the model
#make  predictions 
pred = model.predict(temp)
# define subplot
plt.imshow(temp.reshape(28,28), cmap = 'gray')
plt.axis('off')
# show the figure
predicted = pred.argmax()
real = 0
plt.title('Real %i, Predited: %i' % (real,predicted) ,fontdict={'fontsize': 10})
# show the figure
plt.show()
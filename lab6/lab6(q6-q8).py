# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1siQHib9S6FfGgyQBwi8N0rVadLn9eGaK
"""

"""
@author: katerina
"""
import numpy as np
#import datasets 
from sklearn import datasets
#matplotlib inline
import matplotlib.pyplot as plt
from google.colab import files

#import datasets 
Iris = datasets.load_iris()

irisData = Iris.data[50:150,:] #takes all the data between 50-150 2 groups

irisLabels = Iris.target[50:150]+1 # true labeling +1 for ignoring zero
featureNames = Iris.feature_names[:]
plt.plot()
plt.title("The Iris Dataset true labels")
plt.xlabel(Iris.feature_names[0])
plt.ylabel(Iris.feature_names[1])
plt.scatter(irisData[:,0],irisData[:,1],c = irisLabels, s=50)
plt.show()

trnSize= 20 #the train group will contain 20 flowers

#                         the flowers 0-20               50-70 
trnData = np.concatenate((irisData[0:trnSize,:],irisData[50:50+trnSize,:]),axis=0) #train data will contain the shirshur of the two train data array
trnLabels = np.concatenate((irisLabels[0:trnSize],irisLabels[50:50+trnSize]))
#                                         21-49                          71-100
testData = np.concatenate((irisData[trnSize+1:2*trnSize+9,:],irisData[50+trnSize+1:len(irisData),:]),axis=0)
testLabels = np.concatenate((irisLabels[trnSize+1:2*trnSize+9],irisLabels[50+trnSize+1:len(irisData)]),axis=0)

plt.scatter(trnData[:,0],trnData[:,1],c =trnLabels, s=50)
plt.title("The TRAIN Iris Dataset labels")
plt.show()

plt.scatter(testData[:,0],testData[:,1],c =testLabels, s=50)
plt.title("The Test Iris Dataset labels BEFOR KNN algo")
plt.show()

dist = np.zeros((len(testData),2*trnSize)) #rows - number of test points , col- number of train points

res=[]
for j,testRow in enumerate(testData):
    for i,trnRow in enumerate(trnData):
        dist[j,i] = np.linalg.norm(testRow[:]-trnRow[:]) #the distance of the flower from the train row- oclid distance between himslef to enything 
    resultJ = np.argmin(dist[j,:]) #finding the closest nighboor
    result = trnLabels[resultJ]
    #print("The point", j, "is in group", result)
    res.append(result)

plt.title("The Test Iris Dataset labels AFTER KNN algo")
plt.scatter(testData[:,0],testData[:,1],c = res,s=50)
plt.show()